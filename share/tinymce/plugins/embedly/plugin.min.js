// WORK IN PROGRESS


tinymce.PluginManager.add('embedly', function(editor, url) {
	var win, data, placeholderDataAttr;

	data = {};

	placeholderDataAttr = 'data-mce-object';

	var escapeAttr = function quoteattr(s, preserveCR) {
		return ('' + s)
			.replace(/&/g, '&amp;')
			.replace(/'/g, '&apos;')
			.replace(/"/g, '&quot;')
			.replace(/</g, '&lt;')
			.replace(/>/g, '&gt;')
			.replace(/\r\n/g, '&#13;')
			.replace(/[\r\n]/g, '&#13;')
		;
	};

	var dataToHTML = function(data) {
		var width = data.width;
		var height = data.height;
		var extraAttrs = '';

		width = parseInt(width);
		height = parseInt(height);

		if (isNaN(width)) {
			width = 720;
		}

		if (isNaN(height)) {
			width = 405;
		}
		
		extraAttrs += ' data-width="' + width + '"';
		extraAttrs += ' data-height="' + height + '"';

		if (data.autoplay + '' == 'true') {
			extraAttrs += ' data-autoplay="true"';
		}

		if (data.autosize + '' == 'true') {
			extraAttrs += ' data-autosize="true"';
		}

		return '<div class="macro-embedly" data-url="' + escapeAttr(data.url) + '"' + extraAttrs + '>&nbsp;</div>';
	};

	var dataToPlaceholderHTML = function(data) {
		var outputHTML = '';
		var width = data.width;
		var height = data.height;

		width = parseInt(width);
		height = parseInt(height);

		outputHTML = '<img';
		outputHTML += ' alt="Media Placeholder" src="' + tinymce.Env.transparentSrc + '"';

		if (!isNaN(width)) {
			outputHTML += ' data-mce-p-data-width="' + width + '"';
			if (data.autosize) {
				outputHTML += ' width="100%"';
			} else {
				outputHTML += ' width="' + width + '"';
			}
		} else {
			outputHTML += ' width="100%"';
		}

		if (!isNaN(height)) {
			outputHTML += ' data-mce-p-data-height="' + height  + '"';
			outputHTML += ' height="' + height + '"';
		} else {
			outputHTML += ' height="405"';
		}

		if (data.autoplay + '' == 'true') {
			outputHTML += ' data-mce-p-data-autoplay="true"';
		}

		if (data.autosize + '' == 'true') {
			outputHTML += ' data-mce-p-data-autosize="true"';
		}

		outputHTML += ' data-mce-p-data-url="' + escapeAttr(data.url)  + '"';
		outputHTML += ' data-mce-p-class="macro-embedly"';
		outputHTML += ' class="mce-object mce-object-div"';
		outputHTML += ' ' + placeholderDataAttr + '=' + '"embedly"';

		outputHTML += '>';

		return outputHTML;
	};

	var htmlToData = function(html) {
		var data = {};

		new tinymce.html.SaxParser({
			validate: false,
			allow_conditional_comments: true,
			start: function(name, attrs) {
				if (name != "div") {
					return;
				}


				data = {
					url: attrs.map['data-url'],
					width: attrs.map['data-width'],
					height: attrs.map['data-height'],
					autoplay: (attrs.map['data-autoplay'] + '') == 'true',
					autosize: (attrs.map['data-autosize'] + '') == 'true'
				};
			}
		}).parse(html);

		return data;
	};

	var getSourceData = function() {
		var selection = editor.selection;
		var elm = selection.getNode();

		if (elm.getAttribute(placeholderDataAttr) === 'embedly') {
			return {
				url: elm.getAttribute('data-mce-p-data-url'),
				width: elm.getAttribute('data-mce-p-data-width'),
				height: elm.getAttribute('data-mce-p-data-height'),
				autoplay: elm.getAttribute('data-mce-p-data-autoplay') + '' == 'true',
				autosize: elm.getAttribute('data-mce-p-data-autosize') + '' == 'true'
			}
		};
	};

	var showDialog = function() {
		var selection = editor.selection;
		var elmNode = editor.selection.getNode();

		data = getSourceData() || {};

		var inputWidget = {
			name: 'url',
			type: 'textbox',
			size: 40,
			autofocus: true,
			label: 'Media URL/Link',
			value: data.url || ''
		};

		win = editor.windowManager.open({
			title: 'Insert/edit embedded media',
			data: data,
			bodyType: 'tabpanel',
			body: [
				{
					title: 'Media Source',
					type: 'form',
					items: [				
						{
							type: 'container',
							items: [
								{type:'label', text: 'Embed videos, images, articles, maps, and many other types of media.'}
							]
						},
						{
							type: 'container',
							items: [
								{type:'label', text: 'Supports YouTube, Google, Yahoo, Social Networks, News Networks, and over 250 other content providers.'}
							]
						},
						inputWidget,
						{
							type: 'container',
							label: 'Dimensions',
							layout: 'flex',
							direction: 'row',
							align: 'center',
							spacing: 5,
							items: [
								{name: 'width', type: 'textbox', maxLength: 4, size: 3, value: data.width || '', ariaLabel: 'Width'},
								{type: 'label', text: 'x'},
								{name: 'height', type: 'textbox', maxLength: 4, size: 3, value: data.height || '', ariaLabel: 'Height'}
							]
						},
						{
							type: 'container',
							label: 'Full-Width',
							layout: 'flex',
							direction: 'row',
							align: 'centre',
							spacing: 5,
							items: [
								{
									name: 'autosize', type: 'checkbox', value: false, ariaLabel: 'Full-Width', 
									onclick: function() {
										if (win.find('#autosize').checked()) {
											win.find('#width').disabled(true);
											win.find('#height').disabled(true);
										} else {
											win.find('#width').disabled(false);
											win.find('#height').disabled(false);
										}
									}
								}
							]
						},
						{
							type: 'container',
							label: 'Play Automatically',
							layout: 'flex',
							direction: 'row',
							align: 'centre',
							spacing: 5,
							items: [
								{
									name: 'autoplay', type: 'checkbox', value: false, ariaLabel: 'Play Automatically'
								}
							]
						},
					]
				}
			],
			onSubmit: function() {
				var newAttribs, newData;
				var dom = editor.dom;

				newData = this.toJSON();
				data.url = newData.url;
				data.autoplay = newData.autoplay + '' == 'true';
				data.autosize = newData.autosize + '' == 'true';

				if (newData.width) {
					data.width = newData.width;
				}
				if (newData.height) {
					data.height = newData.height;
				}

				editor.undoManager.transact(function() {
					var beforeObjects, afterObjects, i, y, placeholder;
					if (!elmNode || elmNode.getAttribute(placeholderDataAttr) !== 'embedly') {
						data.id = '__mcenew';
						editor.focus();

						beforeObjects = editor.dom.select('img[data-mce-object]');
						placeholder = dataToPlaceholderHTML(data);

						selection.setContent(placeholder);

						afterObjects = editor.dom.select('img[data-mce-object]');
						// Find new image placeholder so we can select it
						for (i = 0; i < beforeObjects.length; i++) {
							for (y = afterObjects.length - 1; y >= 0; y--) {
								if (beforeObjects[i] == afterObjects[y]) {
									afterObjects.splice(y, 1);
								}
							}
						}

						if (afterObjects[0]) {
							editor.selection.select(afterObjects[0]);
						}

						elmNode = dom.get('__mcenew');
						dom.setAttrib(elmNode, 'id', null);

						editor.nodeChanged();
					} else if (!data.url) {
						dom.remove(elmNode);
						editor.focus();
						editor.nodeChanged();
					} else {
						newAttribs = {
							'data-mce-p-data-url': data.url,
							'data-mce-p-data-autosize': '' + data.autosize,
							'data-mce-p-data-autoplay': '' + data.autoplay
						};

						if (data.width) {
							newAttribs['data-mce-p-data-width'] = data.width;
							newAttribs['width'] = data.width;
							if (data.autosize) {
								newAttribs['width'] = "100%";
							}
						} else {
							newAttribs['width'] = '100%';
						}
						if (data.height) {
							newAttribs['data-mce-p-data-height'] = data.height;
							newAttribs['height'] = data.height;
						} else {
							newAttribs['height'] = '100%';
						}

						dom.setAttribs(elmNode, newAttribs);
						editor.nodeChanged();
					}
				});
			}
		});

		if (win.find('#autosize').checked()) {
			win.find('#width').disabled(true);
			win.find('#height').disabled(true);
		}
	};

	editor.on('ObjectSelected', function(e) {
		var objectType = e.target.getAttribute(placeholderDataAttr);

		if (objectType == "embedly") {
			//e.preventDefault(); // commented out to allow resizing
		}
	});

	editor.on('ResolveName', function(e) {
		var name;

		if (e.target.nodeType == 1 && (name = e.target.getAttribute(placeholderDataAttr))) {
			e.name = name;
		}
	});
	
	
	editor.on('preInit', function() {
		editor.parser.addAttributeFilter('data-url', function(nodes, attrName) {
			var nodeData, placeholderHTML;
			var i = nodes.length, node, placeHolder;

			while (i--) {
				node = nodes[i];
				if (!node.parent) {
					continue;
				}

				if (node.name != 'div' || node.attr('class').indexOf('macro-embedly') < 0) {
					continue;
				}

				nodeData = {
					width: node.attr('data-width'),
					height: node.attr('data-height'),
					url: node.attr('data-url'),
					autoplay: node.attr('data-autoplay'),
					autosize: node.attr('data-autosize')
				};

				placeholderHTML = dataToPlaceholderHTML(nodeData);

				placeHolder = new tinymce.html.DomParser().parse(placeholderHTML);

				node.replace(placeHolder);
			}
		});

		editor.serializer.addAttributeFilter(placeholderDataAttr, function(nodes, name) {
			var i = nodes.length, node, realElm, ai, attribs, innerHtml, innerNode;

			while (i--) {
				node = nodes[i];
				if (!node.parent) {
					continue;
				}

				if (node.attr(placeholderDataAttr) !== 'embedly') {
					continue;
				}

				realElm = new tinymce.html.Node('div', 1);

				realElm.attr({
					style: node.attr('style')
				});

				// Unprefix all placeholder attributes
				attribs = node.attributes;
				ai = attribs.length;
				while (ai--) {
					var attrName = attribs[ai].name;

					if (attrName.indexOf('data-mce-p-') === 0) {
						realElm.attr(attrName.substr(11), attribs[ai].value);
					}
				}

				// Inject innerhtml
				innerHtml = node.attr('data-mce-html');
				if (!innerHtml) {
					innerHtml = '&nbsp;';
				}
				innerNode = new tinymce.html.Node('#text', 3);
				innerNode.raw = true;
				innerNode.value = unescape(innerHtml);
				realElm.append(innerNode);

				node.replace(realElm);
			}
		});
	});
	
	editor.on('objectResized', function(e) {
		var target = e.target, html;

		if (target.getAttribute(placeholderDataAttr) === 'embedly') {	
			target.setAttribute('data-mce-p-data-width', e.width);
			target.setAttribute('data-mce-p-data-height', e.height);
			target.setAttribute('width', e.width);
			target.setAttribute('height', e.height);
		}
	});

	editor.addButton('embedly', {		
		icon: 'media',
		tooltip: 'Insert/edit media',
		onclick: showDialog,
		stateSelector: ['img[' + placeholderDataAttr + '=embedly]']
	});

	editor.addMenuItem('embedly', {
		icon: 'media',
		text: 'Media',
		onclick: showDialog,
		context: 'insert',
		prependToContext: true
	});

	editor.addCommand('mceEmbedly', showDialog);
});