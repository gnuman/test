/**
 * plugin.js
 *
 * Copyright, Moxiecode Systems AB
 * Released under LGPL License.
 *
 * License: http://www.tinymce.com/license
 * Contributing: http://www.tinymce.com/contributing
 */

/*global tinymce:true */

tinymce.PluginManager.add('link', function(editor) {
	function createLinkList(callback) {
		return function() {
			var linkList = editor.settings.link_list;

			if (typeof(linkList) == "string") {
				tinymce.util.XHR.send({
					url: linkList,
					success: function(text) {
						callback(tinymce.util.JSON.parse(text));
					}
				});
			} else if (typeof(linkList) == "function") {
				linkList(callback);
			} else {
				callback(linkList);
			}
		};
	}

	function buildListItems(inputList, itemCallback, startItems) {
		function appendItems(values, output) {
			output = output || [];

			tinymce.each(values, function(item) {
				var menuItem = {text: item.text || item.title};

				if (item.menu) {
					menuItem.menu = appendItems(item.menu);
				} else {
					menuItem.value = item.value;

					if (itemCallback) {
						itemCallback(menuItem);
					}
				}

				output.push(menuItem);
			});

			return output;
		}

		return appendItems(inputList, startItems || []);
	}

	function showDialog(linkList) {
		var context_path, cohort_path, dataRelativeTo, dataResolved, rootPathText;
		var data = {}, selection = editor.selection, dom = editor.dom, selectedElm, anchorElm, initialText;
		var win, onlyText, textListCtrl, linkListCtrl, relListCtrl, targetListCtrl, classListCtrl, linkTitleCtrl, value;

		selectedElm = selection.getNode();
		anchorElm = dom.getParent(selectedElm, 'a[href]');
		onlyText = isOnlyTextSelected();

		data.text = initialText = anchorElm ? (anchorElm.innerText || anchorElm.textContent) : selection.getContent({format: 'text'});
		data.href = anchorElm ? dom.getAttrib(anchorElm, 'href') : '';
		dataRelativeTo = anchorElm ? dom.getAttrib(anchorElm, 'data-relative-to') : '';
		dataResolved = anchorElm ? dom.getAttrib(anchorElm, 'data-resolved') : 'false';

		dataResolved = (dataResolved + '') === 'true';

		// normalise context and cohort paths
		context_path = editor.settings.context_path;
		if (context_path && context_path[context_path.length-1] !== '/') {
			context_path += '/';
		}
		cohort_path = editor.settings.cohort_path;
		if (cohort_path && cohort_path[cohort_path.length-1] !== '/') {
			cohort_path += '/';
		}
		localPathName = window.location.pathname;
		if (localPathName && localPathName[localPathName.length-1] !== '/') {
			localPathName += '/';
		}
		if (dataRelativeTo && dataRelativeTo[dataRelativeTo.length-1] !== '/') {
			dataRelativeTo += '/';
		}

		// replace hrefs
		if (dataRelativeTo === context_path) {
			data.href = data.href.replace(dataRelativeTo, '~/');
		} else if (dataRelativeTo === cohort_path) {
			data.href = data.href.replace(dataRelativeTo, '-/');
		} else if (dataRelativeTo === localPathName) {
			data.href = data.href.replace(localPathName, './');
		}

		function linkListChangeHandler(e) {
			var textCtrl = win.find('#text');
			var hrefValue;

			if (!textCtrl.value() || (e.lastControl && textCtrl.value() == e.lastControl.text())) {
				textCtrl.value(e.control.text());
			}

			hrefValue = e.control.value();
			if (dataRelativeTo === context_path) {
				hrefValue = hrefValue.replace(dataRelativeTo, '~/');
				dataResolved = false;
			} else if (dataRelativeTo === cohort_path) {
				hrefValue = hrefValue.replace(dataRelativeTo, '-/');
				dataResolved = false;
			} else if (dataRelativeTo === localPathName) {
			    hrefValue = hrefValue.replace(localPathName, './');
			    dataResolved = true;
		    }

			win.find('#href').value(hrefValue);
		}

		function buildAnchorListControl(url) {
			var anchorList = [];

			tinymce.each(editor.dom.select('a:not([href])'), function(anchor) {
				var id = anchor.name || anchor.id;

				if (id) {
					anchorList.push({
						text: id,
						value: '#' + id,
						selected: url.indexOf('#' + id) != -1
					});
				}
			});

			if (anchorList.length) {
				anchorList.unshift({text: 'None', value: ''});

				return {
					name: 'anchor',
					type: 'listbox',
					label: 'Anchors',
					values: anchorList,
					onselect: linkListChangeHandler
				};
			}
		}

		function updateText() {
			if (!initialText && data.text.length === 0 && onlyText) {
				this.parent().parent().find('#text')[0].value(this.value());
			}
		}

		function urlChange(e) {
			var meta = e.meta || {};

			if (linkListCtrl) {
				linkListCtrl.value(editor.convertURL(this.value(), 'href'));
			}

			tinymce.each(e.meta, function(value, key) {
				win.find('#' + key).value(value);
			});

			if (!meta.text) {
				updateText.call(this);
			}
		}

		function isOnlyTextSelected(anchorElm) {
			var html = selection.getContent();

			// Partial html and not a fully selected anchor element
			if (/</.test(html) && (!/^<a [^>]+>[^<]+<\/a>$/.test(html) || html.indexOf('href=') == -1)) {
				return false;
			}

			if (anchorElm) {
				var nodes = anchorElm.childNodes, i;

				if (nodes.length === 0) {
					return false;
				}

				for (i = nodes.length - 1; i >= 0; i--) {
					if (nodes[i].nodeType != 3) {
						return false;
					}
				}
			}

			return true;
		}

		if ((value = dom.getAttrib(anchorElm, 'target'))) {
			data.target = value;
		} else if (editor.settings.default_link_target) {
			data.target = editor.settings.default_link_target;
		}

		if ((value = dom.getAttrib(anchorElm, 'rel'))) {
			data.rel = value;
		}

		if ((value = dom.getAttrib(anchorElm, 'class'))) {
			data['class'] = value;
		}

		if ((value = dom.getAttrib(anchorElm, 'title'))) {
			data.title = value;
		}

		if (onlyText) {
			textListCtrl = {
				name: 'text',
				type: 'textbox',
				size: 40,
				label: 'Text to display',
				onchange: function() {
					data.text = this.value();
				}
			};
		}

		if (linkList) {
			linkListCtrl = {
				type: 'listbox',
				label: 'Link list',
				values: buildListItems(
					linkList,
					function(item) {
						item.value = editor.convertURL(item.value || item.url, 'href');
					},
					[{text: 'None', value: ''}]
				),
				onselect: linkListChangeHandler,
				value: editor.convertURL(data.href, 'href'),
				onPostRender: function() {
					linkListCtrl = this;
				}
			};
		}

		if (editor.settings.target_list !== false) {
			if (!editor.settings.target_list) {
				editor.settings.target_list = [
					{text: 'New window', value: '_blank'},
					{text: 'Same window', value: ''}
				];
			}

			targetListCtrl = {
				name: 'target',
				type: 'listbox',
				label: 'Open in',
				values: buildListItems(editor.settings.target_list)
			};
		}

		if (editor.settings.rel_list) {
			relListCtrl = {
				name: 'rel',
				type: 'listbox',
				label: 'Rel',
				values: buildListItems(editor.settings.rel_list)
			};
		}

		if (editor.settings.link_class_list) {
			classListCtrl = {
				name: 'class',
				type: 'listbox',
				label: 'Style',
				values: buildListItems(
					editor.settings.link_class_list,
					function(item) {
						/*if (item.value) {
							item.textStyle = function() {
								return editor.formatter.getCssText({inline: 'a', classes: [item.value]});
							};
						}*/
					}
				)
			};
		}

		if (editor.settings.link_title !== false) {
			linkTitleCtrl = {
				name: 'title',
				type: 'textbox',
				label: 'Hover text',
				value: data.title
			};
		}

		rootPathText = '~/ for course pages, -/ for class contributions, ./ for sub-pages.';

		if (editor.settings.context_path.indexOf('/u/') == 0) {
			rootPathText = '~/ for profile pages, ./ for sub-pages.';
		}

		win = editor.windowManager.open({
			title: 'Insert link',
			data: data,
			bodyType: 'tabpanel',
			body: [
				{
					title: 'General',
					type: 'form',
					items: [
						{
							name: 'description',
							type: 'label',
							size: 40,
							label: 'Root Paths: ',
							text: rootPathText
						},
						{
							name: 'href',
							type: 'filepicker',
							filetype: 'file',
							size: 40,
							autofocus: true,
							label: 'Url',
							onchange: urlChange,
							onkeyup: updateText
						},
						{
							name: 'src-success',
							type: 'spacer',
							label: ' ',
							classes: 'file-upload-success',
							minHeight: 20
						},
						textListCtrl,
						linkTitleCtrl,
						buildAnchorListControl(data.href),
						linkListCtrl,
						relListCtrl,
						targetListCtrl,
						classListCtrl
					]
				}
				/*,
				{
					title: editor.settings.context_name ? editor.settings.context_name + ' Links' : 'Browse Pages',
					type: 'iframe',
					url: editor.settings.link_browser_url
				}
				*/
			],
			onSubmit: function(e) {
				var href, relativeTo;

				data = tinymce.extend(data, e.data);
				href = data.href;
				relativeTo = dataRelativeTo;

				// Delay confirm since onSubmit will move focus
				function delayedConfirm(message, callback) {
					var rng = editor.selection.getRng();

					window.setTimeout(function() {
						editor.windowManager.confirm(message, function(state) {
							editor.selection.setRng(rng);
							callback(state);
						});
					}, 0);
				}

				function insertLink() {
					var pathname;
					var linkAttrs = {
						href: href,
						'data-relative-to': relativeTo,
						target: data.target ? data.target : null,
						rel: data.rel ? data.rel : null,
						"class": data["class"] ? data["class"] : null,
						title: data.title ? data.title : null
					};

					if (dataResolved) {
						linkAttrs['data-resolved'] = true;
					}

					if (anchorElm) {
						editor.focus();

						if (onlyText && data.text != initialText) {
							if ("innerText" in anchorElm) {
								anchorElm.innerText = data.text;
							} else {
								anchorElm.textContent = data.text;
							}
						}

						dom.setAttribs(anchorElm, linkAttrs);

						selection.select(anchorElm);
						editor.undoManager.add();
					} else {
						if (onlyText) {
							editor.insertContent(dom.createHTML('a', linkAttrs, dom.encode(data.text)));
						} else {
							editor.execCommand('mceInsertLink', false, linkAttrs);
						}
					}
				}

				if (!href) {
					editor.execCommand('unlink');
					return;
				}

				// Is email and not //user@domain.com
				if (href.indexOf('@') > 0 && href.indexOf('//') == -1 && href.indexOf('mailto:') == -1) {
					delayedConfirm(
						'The URL you entered seems to be an email address. Do you want to add the required mailto: prefix?',
						function(state) {
							if (state) {
								href = 'mailto:' + href;
							}

							insertLink();
						}
					);

					return;
				}

				if (href.indexOf('./') == 0) {
					pathname = window.location.pathname;
					if (pathname[pathname.length-1] !== '/') {
						pathname += '/';
					}
					href = pathname + href.substr(2);
					relativeTo = pathname;
					dataResolved = true;
					insertLink();
					return;
				}

				if (editor.settings.context_path && href.indexOf('~/') == 0) {
					pathname = editor.settings.context_path;
					if (pathname[pathname.length-1] !== '/') {
						pathname += '/';
					}
					if (pathname[0] !== '/') {
						pathname = '/' + pathname;
					}

					href = pathname + href.substr(2);
					relativeTo = editor.settings.context_path;
					dataResolved = false;
					insertLink();
					return;
				}

				if (editor.settings.cohort_path && href.indexOf('-/') == 0) {
					pathname = editor.settings.cohort_path;
					if (pathname[pathname.length-1] !== '/') {
						pathname += '/';
					}
					if (pathname[0] !== '/') {
						pathname = '/' + pathname;
					}
					href = pathname + href.substr(2);
					relativeTo = editor.settings.cohort_path;
					dataResolved = false;
					insertLink();
					return;
				}

				// Is www. prefixed
				if (/^\s*www\./i.test(href)) {
					delayedConfirm(
						'The URL you entered seems to be an external link. Do you want to add the required http:// prefix?',
						function(state) {
							if (state) {
								href = 'http://' + href;
							}

							insertLink();
						}
					);

					return;
				}

				insertLink();
			}
		});


	}

	editor.addButton('link', {
		icon: 'link',
		tooltip: 'Insert/edit link',
		shortcut: 'Ctrl+K',
		onclick: createLinkList(showDialog),
		stateSelector: 'a[href]'
	});

	editor.addButton('unlink', {
		icon: 'unlink',
		tooltip: 'Remove link',
		cmd: 'unlink',
		stateSelector: 'a[href]'
	});

	editor.addShortcut('Ctrl+K', '', createLinkList(showDialog));
	editor.addCommand('mceLink', createLinkList(showDialog));

	this.showDialog = showDialog;

	/*
	editor.addMenuItem('link', {
		icon: 'link',
		text: 'Insert Link',
		shortcut: 'Ctrl+K',
		onclick: createLinkList(showDialog),
		stateSelector: 'a[href]',
		context: 'insert',
		prependToContext: true
	});
	*/
});
