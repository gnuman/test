tinymce.PluginManager.add('local_backup', function(editor, url) {
    var storage_id = editor.settings.storage_id;
    var isSupported = !!window.localStorage && !!storage_id;
    var key;
    var backup_listing;
    var backups;
    var hasBackedUp = false;

    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

    backups = JSON.parse(window.localStorage[storage_id + '.backups'] || '[]');

    var update_backup_listing = function() {
        key = editor.settings.storage_id + '.' + Date.now();
        backups = JSON.parse(window.localStorage[storage_id + '.backups'] || '[]');
        backups.push(key);
        window.localStorage[storage_id + '.backups'] = JSON.stringify(backups);
    };

    var restore_backup = function(evt) {
        var backup_key = this.settings.value;
        var backup_data;

        if (backup_key === null) {
            return;
        }

        backup_data = window.localStorage[backup_key];

        if (backup_data) {
            update_backup_listing();
            editor.setContent(window.localStorage[backup_key]);
        }

        editor.isNotDirty = false;
        editor.nodeChanged();
    };

    var store_backup = function() {
        if (!hasBackedUp) {
            update_backup_listing();
        }
        window.localStorage[key] = editor.getContent();
        hasBackedUp = true;
    };

    if (isSupported) {
        backup_listing = [];
        backups.forEach(function(val) {
            var parts = val.split('.');
            var date = new Date(parseInt(parts[1], 10));
            var text = date.getDate() + ' ' + months[date.getMonth()] + ' ' + date.getFullYear() + ', ' + date.getHours() + ':' + date.getMinutes();

            backup_listing.push({
                text: text,
                value: val,
                onclick: restore_backup
            });
        });

        backup_listing.reverse();

        if (backup_listing.length > 15) {
            var deletions = backup_listing.splice(15);
            deletions.forEach(function(val) {
                window.localStorage.removeItem(val);
            });
        }

        if (backup_listing.length === 0) {
            backup_listing = [{
                text: 'No offline backups available.',
                value: null
            }];
        }
        
        editor.addMenuItem('local_backup', {
            text: 'Restore from Backup',
            context: 'edit',
            menu: backup_listing
        });
    }

    if (isSupported) {
        editor.on('keyup', store_backup);
    }
});
